import React from "react";

import ExpandableElement from "../utils/expandableElement";

import './styles/Workflow.css'

/**
 * Workflow Component
 *
 * Displays the details of a workflow including its status and steps.
 *
 * Props:
 * - workflowData (object): The data related to the workflow.
 *   - workflow_name (string): The name of the workflow.
 *   - version (string): The version of the workflow.
 *   - status (string): The current status of the workflow.
 *   - steps (array): A list of steps in the workflow.
 *     - step_id (number): The unique identifier for the step.
 *     - module (string): The module associated with the step.
 *     - status (string): The status of the step.
 *     - description (string): A short description of the step.
 *     - parameters (object): Optional parameters for the step.
 *     - response (object): The response generated by the step.
 */
const Workflow = ({ workflowData }) => {
  if (!workflowData) {return null}

  return (
    <div className={`workflow ${workflowData.status}`}>
      <div className="workflow-details">
        <p className="workflow-name">
          {workflowData.workflow_name} (v{workflowData.version})
        </p>
        <p className={`status ${workflowData.status}`}>{workflowData.status}</p>
      </div>
      <div className="steps">
        {workflowData.steps.map((step) => (
          <div key={step.step_id} className={`step ${step.status}`}>
            <div className="step-details">
              <p className="step-index">{`Step ${step.step_id}`}</p>
              <p className="module"><strong>{step.module}</strong></p>
              <p className={`status ${step.status}`}>{step.status}</p>
            </div>
            <p>
              {step.description || "No description available"}
            </p>
            {step.parameters && (
              <div className="parameters">
                {Object.entries(step.parameters).map(([key, value]) => (
                  <div>
                    <strong>{key}</strong> : {value}
                  </div>
                ))}
              </div>
            )}
            {step.response && Object.keys(step.response).length > 0 && (
                <ExpandableElement
                  className="response"
                  minContent={"Response Generated + "}
                  maxContent={
                    <>
                      <h4>Response</h4>
                      <pre className="parameters">{step.response}</pre>
                    </>
                  }
                  initiallyExpanded={false}
                />
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default Workflow;
